#version 300 es
precision highp float;
precision highp int;
in vec2 fragTexCoord;
uniform highp isampler2D Grid2; //Middle time step
uniform highp isampler2D Grid3; //Lower time step
out ivec2 fragColor;

uniform vec2 size;
uniform vec2 d;


//Constants
float dt = 0.0001;

float alpha = 0.4;
float c = 1.;

// return 1 if v inside the box, return 0 otherwise
float insideBox(vec2 v, vec2 bottomLeft, vec2 topRight) {
    vec2 s = step(bottomLeft, v) - step(topRight, v);
    return s.x * s.y;   
}

float Decode(ivec2 textvalue)
{
    return (float(textvalue.x))/pow(2.,28.);
    //return float(textvalue.x) + float(textvalue.y)/pow(2.,32.); 
}

float get(int x, int y) //get function //Middle time step
{ //x and y are offset values
    
    vec2 TexPos = fragTexCoord.xy + vec2(x,y)/size;
    ivec2 textvalue = texture(Grid2, TexPos).xy;
    return Decode(textvalue)*insideBox(TexPos, vec2(0.0,0.0), vec2(1.0,1.0));
}

float get_L(int x, int y) //Decode and get function //Lower time step
{ //x and y are offset values
    vec2 TexPos = fragTexCoord.xy + vec2(x,y)/size;
    ivec2 textvalue = texture(Grid3, TexPos).xy;
    return Decode(textvalue)*insideBox(TexPos, vec2(0.0,0.0), vec2(1.0,1.0));
}


ivec2 encode(float num)
{
    return ivec2(floor(pow(2.,28.)*num), 0);
    //return uvec2(floor(num), floor(fract(num)*pow(2.,32.))); 
}

float D()
{
    float temp = (1./(d.x*d.x))*(get(1,0)-2.*get(0,0)+get(-1,0)) + (1./(d.y*d.y))*(get(0,1)-2.*get(0,0)+get(0,-1));
    return (c*c/2.)*temp;
}


float get_next2()
{
   float temp = 2.*alpha*get(0,0) + dt*D() + (1./(2.*dt))*(2.*get(0,0) - get_L(0,0));
   return (2.*dt/(1.+4.*alpha*dt))*(temp);
}



float get_next()
{
    float temp = get(1,0)+get(-1,0)+get(0,1)+get(0,-1)-4.*get(0,0);
    return temp*pow(dt,2.)/pow(d.x,2.) + 2.*get(0,0) - get_L(0,0);
}

/*
float 

float get_next_2D_Energy()
{


}
*/

/*
float get_next()
{
   return (get(1,0)+get(-1,0)+get(0,1)+get(0,-1)-4.*get(0,0))*(dt/(h*h)) + get_L(0,0);
}
*/

void main()
{
fragColor = encode(get_next());
}